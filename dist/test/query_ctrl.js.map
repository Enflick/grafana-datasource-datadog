{"version":3,"sources":["../../src/query_ctrl.js"],"names":["queryBuilder","DataDogQueryCtrl","$scope","$injector","uiSegmentSrv","templateSrv","removeText","target","aggregation","aggregationSegment","newSegment","value","fake","custom","metric","metricSegment","tags","tagSegments","map","fixTagSegments","functions","_","f","dfunc","createFuncInstance","func","funcDef","withDefaultParams","params","slice","as","asSegment","rawQuery","datasource","metricFindQuery","console","log","then","transformToSegments","Promise","resolve","text","segment","tagFindQuery","type","removeSegment","newFake","results","unshift","panelCtrl","refresh","count","length","lastSegment","Math","max","push","newPlusButton","error","def","name","without","persistFunctions","targetChanged","added","index","splice","realSegments","filter","query","buildQuery","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport dfunc from './dfunc';\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './func_editor';\nimport './add_datadog_func';\nimport * as queryBuilder from './query_builder';\n//import {has_begun} from './datasource.js'\n\nexport class DataDogQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv, templateSrv)  {\n    super($scope, $injector);\n    this.removeText = '-- remove tag --';\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n\n    if (this.target.aggregation) {\n      this.aggregationSegment = new uiSegmentSrv.newSegment(\n        this.target.aggregation\n      );\n    } else {\n      this.aggregationSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Aggregation',\n        fake: true,\n        custom: false,\n      });\n    }\n    if (this.target.metric) {\n      this.metricSegment = new uiSegmentSrv.newSegment(\n        this.target.metric\n      );\n    } else {\n      this.metricSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n        custom: false,\n      });\n    }\n\n    this.target.tags = this.target.tags || [];\n    this.tagSegments = this.target.tags.map(uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.functions = [];\n    this.target.functions = this.target.functions || [];\n    this.functions = _.map(this.target.functions, func => {\n      var f = dfunc.createFuncInstance(func.funcDef, {withDefaultParams: false});\n      f.params = func.params.slice();\n      return f;\n    });\n\n    if (this.target.as) {\n      this.asSegment = uiSegmentSrv.newSegment(this.target.as);\n    } else {\n      this.asSegment = uiSegmentSrv.newSegment({\n        value: 'Select As',\n        fake: true,\n        custom: false,\n      });\n    }\n\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMetrics() {\n\n    //console.log(\"TEST::::: \" + this.datasource.metricFindQuery());\n    if(this.datasource.metricFindQuery() == 69) {\n      console.log(\"INSIDE IF STATEMENT\");\n      //has_begun = false;\n      return;\n    }\n    else{\n    return this.datasource.metricFindQuery()\n    .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  getAggregations() {\n    return Promise.resolve([\n      {text: 'avg by', value: 'avg'},\n      {text: 'max by', value: 'max'},\n      {text: 'min by', value: 'min'},\n      {text: 'sub by', value: 'sum'},\n    ]);\n  }\n\n  getAs() {\n    return Promise.resolve([\n      {text: 'None', value: 'None'},\n      {text: 'as_count', value: 'as_count'},\n      {text: 'as_rate', value: 'as_rate'},\n    ]);\n  }\n\n  getTags(segment) {\n    return this.datasource.tagFindQuery()\n    .then(this.uiSegmentSrv.transformToSegments(true))\n    .then(results => {\n      if (segment.type !== 'plus-button') {\n        let removeSegment = this.uiSegmentSrv.newFake(this.removeText);\n        results.unshift(removeSegment);\n      }\n\n      return results;\n    });\n  }\n\n  aggregationChanged() {\n    this.target.aggregation = this.aggregationSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  metricChanged() {\n    console.log(\"inside metricChanged()\");\n    this.target.metric = this.metricSegment.value;\n    //console.log(\"this.metric.value.length: \" + this.metricSegment.value.length);\n    this.panelCtrl.refresh();\n\n  }\n\n  asChanged() {\n\n    if (this.asSegment.value === 'None') {\n      this.target.as = null;\n    } else {\n      this.target.as = this.asSegment.value;\n    }\n    this.panelCtrl.refresh();\n  }\n\n  fixTagSegments() {\n    var count = this.tagSegments.length;\n    var lastSegment = this.tagSegments[Math.max(count-1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  targetChanged() {\n    if (this.error) {\n      return;\n    }\n    this.panelCtrl.refresh();\n  }\n\n  persistFunctions () {\n    this.target.functions = _.map(this.functions, func => {\n      return {\n        funcDef: func.def.name,\n        params: func.params.slice(),\n      };\n    });\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  addFunction(funcDef) {\n    var func = dfunc.createFuncInstance(funcDef, {withDefaultParams: true});\n    func.added = true;\n    this.functions.push(func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  tagSegmentUpdated(segment, index) {\n    if (segment.value === this.removeText) {\n      this.tagSegments.splice(index, 1);\n    }\n\n    let realSegments = _.filter(this.tagSegments, segment => segment.value);\n    this.target.tags = realSegments.map(segment => segment.value);\n\n    this.tagSegments = _.map(this.target.tags, this.uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.panelCtrl.refresh();\n  }\n\n  getCollapsedText() {\n    if (this.target.rawQuery) {\n      return this.target.query;\n    } else {\n      return queryBuilder.buildQuery(this.target);\n    }\n  }\n}\n\nDataDogQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}