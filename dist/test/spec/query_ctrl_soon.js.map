{"version":3,"sources":["../../../spec/query_ctrl_soon.js"],"names":["describe","ctx","beforeEach","angularMocks","module","providePhase","inject","$rootScope","$controller","$q","scope","$new","target","datasource","metricFindQuery","stub","returns","when","panelCtrl","panel","refresh","spy","ctrl","$scope","$digest","it","expect","getCall","args","to","be","segments","value","functions","length","expandable","parseTarget","addFunction","gfunc","getFuncDef","params","called","getAltSegments","then","results","altSegments","targetChanged","targets","refId","updateModelTarget","targetFull"],"mappings":"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","file":"query_ctrl_soon.js","sourcesContent":["\nimport {QueryCtrl} from \"../module\";\nimport 'app/core/services/segment_srv';\nimport sinon from 'sinon';\n\nimport dfunc from '../dfunc';\n\ndescribe('DataDogQueryCtrl', function() {\n  let ctx = {};\n\n  beforeEach(angularMocks.module('grafana.core'));\n  beforeEach(angularMocks.module('grafana.controllers'));\n  beforeEach(angularMocks.module('grafana.services'));\n\n  beforeEach(ctx.providePhase());\n  beforeEach(angularMocks.inject(($rootScope, $controller, $q) => {\n    ctx.$q = $q;\n    ctx.scope = $rootScope.$new();\n    ctx.target = {};\n    ctx.datasource.metricFindQuery = sinon.stub().returns(ctx.$q.when([]));\n    ctx.panelCtrl = {panel: {}};\n    ctx.panelCtrl.refresh = sinon.spy();\n\n    ctx.ctrl = $controller(QueryCtrl, {$scope: ctx.scope}, {\n      panelCtrl: ctx.panelCtrl,\n      datasource: ctx.datasource,\n      target: ctx.target\n    });\n    ctx.scope.$digest();\n  }));\n\n  describe('init', function() {\n    it('should validate metric key exists', function() {\n      expect(ctx.datasource.metricFindQuery.getCall(0).args[0]).to.be('test.prod.*');\n    });\n\n    it('should delete last segment if no metrics are found', function() {\n      expect(ctx.ctrl.segments[2].value).to.be('select metric');\n    });\n\n    it('should parse expression and build function model', function() {\n      expect(ctx.ctrl.functions.length).to.be(2);\n    });\n  });\n\n  describe('when adding function', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'test.prod.*.count';\n      ctx.ctrl.datasource.metricFindQuery = sinon.stub().returns(ctx.$q.when([{expandable: false}]));\n      ctx.ctrl.parseTarget();\n      ctx.ctrl.addFunction(gfunc.getFuncDef('aliasByNode'));\n    });\n\n    it('should add function with correct node number', function() {\n      expect(ctx.ctrl.functions[0].params[0]).to.be(2);\n    });\n\n    it('should update target', function() {\n      expect(ctx.ctrl.target.target).to.be('aliasByNode(test.prod.*.count, 2)');\n    });\n\n    it('should call refresh', function() {\n      expect(ctx.panelCtrl.refresh.called).to.be(true);\n    });\n  });\n\n  describe('when adding function before any metric segment', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = '';\n      ctx.ctrl.datasource.metricFindQuery.returns(ctx.$q.when([{expandable: true}]));\n      ctx.ctrl.parseTarget();\n      ctx.ctrl.addFunction(gfunc.getFuncDef('asPercent'));\n    });\n\n    it('should add function and remove select metric link', function() {\n      expect(ctx.ctrl.segments.length).to.be(0);\n    });\n  });\n\n  describe('when initalizing target without metric expression and only function', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'asPercent(#A, #B)';\n      ctx.ctrl.datasource.metricFindQuery.returns(ctx.$q.when([]));\n      ctx.ctrl.parseTarget();\n      ctx.scope.$digest();\n    });\n\n    it('should not add select metric segment', function() {\n      expect(ctx.ctrl.segments.length).to.be(0);\n    });\n\n    it('should add both series refs as params', function() {\n      expect(ctx.ctrl.functions[0].params.length).to.be(2);\n    });\n  });\n\n  describe('when initializing a target with single param func using variable', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'movingAverage(prod.count, $var)';\n      ctx.ctrl.datasource.metricFindQuery.returns(ctx.$q.when([]));\n      ctx.ctrl.parseTarget();\n    });\n\n    it('should add 2 segments', function() {\n      expect(ctx.ctrl.segments.length).to.be(2);\n    });\n\n    it('should add function param', function() {\n      expect(ctx.ctrl.functions[0].params.length).to.be(1);\n    });\n  });\n\n  describe('when initalizing target without metric expression and function with series-ref', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'asPercent(metric.node.count, #A)';\n      ctx.ctrl.datasource.metricFindQuery.returns(ctx.$q.when([]));\n      ctx.ctrl.parseTarget();\n    });\n\n    it('should add segments', function() {\n      expect(ctx.ctrl.segments.length).to.be(3);\n    });\n\n    it('should have correct func params', function() {\n      expect(ctx.ctrl.functions[0].params.length).to.be(1);\n    });\n  });\n\n  describe('when getting altSegments and metricFindQuery retuns empty array', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'test.count';\n      ctx.ctrl.datasource.metricFindQuery.returns(ctx.$q.when([]));\n      ctx.ctrl.parseTarget();\n      ctx.ctrl.getAltSegments(1).then(function(results) {\n        ctx.altSegments = results;\n      });\n      ctx.scope.$digest();\n    });\n\n    it('should have no segments', function() {\n      expect(ctx.altSegments.length).to.be(0);\n    });\n  });\n\n  describe('targetChanged', function() {\n    beforeEach(function() {\n      ctx.ctrl.datasource.metricFindQuery = sinon.stub().returns(ctx.$q.when([{expandable: false}]));\n      ctx.ctrl.parseTarget();\n      ctx.ctrl.target.target = '';\n      ctx.ctrl.targetChanged();\n    });\n\n    it('should rebuld target after expression model', function() {\n      expect(ctx.ctrl.target.target).to.be('aliasByNode(scaleToSeconds(test.prod.*, 1), 2)');\n    });\n\n    it('should call panelCtrl.refresh', function() {\n      expect(ctx.panelCtrl.refresh.called).to.be(true);\n    });\n  });\n\n  describe('when updating targets with nested query', function() {\n    beforeEach(function() {\n      ctx.ctrl.target.target = 'scaleToSeconds(#A)';\n      ctx.ctrl.datasource.metricFindQuery = sinon.stub().returns(ctx.$q.when([{expandable: false}]));\n      ctx.ctrl.parseTarget();\n\n      ctx.ctrl.panelCtrl.panel.targets = [ {\n        target: 'nested.query.count',\n        refId: 'A'\n      }];\n\n      ctx.ctrl.updateModelTarget();\n    });\n\n    it('target should remain the same', function() {\n      expect(ctx.ctrl.target.target).to.be('scaleToSeconds(#A)');\n    });\n\n    it('targetFull should include nexted queries', function() {\n      expect(ctx.ctrl.target.targetFull).to.be('scaleToSeconds(nested.query.count)');\n    });\n  });\n});\n"]}