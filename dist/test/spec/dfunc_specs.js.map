{"version":3,"sources":["../../../spec/dfunc_specs.js"],"names":["func","createFuncInstance","to","be","ok","def","name","equal","params","length","defaultParams","func2","updateText","text","render","withDefaultParams","undefined","catIndex","getCategories","Special","greaterThan","updateParam"],"mappings":"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","file":"dfunc_specs.js","sourcesContent":["import {describe, it, expect} from 'test/lib/common';\nimport dfunc from '../dfunc';\n\ndescribe('when creating func instance from func names', function() {\n  it('should return func instance', function() {\n    var func = dfunc.createFuncInstance('sumSeries');\n    expect(func).to.be.ok();\n    expect(func.def.name).to.equal('sumSeries');\n    expect(func.def.params.length).to.equal(5);\n    expect(func.def.defaultParams.length).to.equal(1);\n  });\n\n  it('should return func instance with shortName', function() {\n    var func = dfunc.createFuncInstance('sum');\n    expect(func).to.be.ok();\n  });\n\n  it('should return func instance from funcDef', function() {\n    var func = dfunc.createFuncInstance('sum');\n    var func2 = dfunc.createFuncInstance(func.def);\n    expect(func2).to.be.ok();\n  });\n\n  it('func instance should have text representation', function() {\n    var func = dfunc.createFuncInstance('groupByNode');\n    func.params[0] = 5;\n    func.params[1] = 'avg';\n    func.updateText();\n    expect(func.text).to.equal(\"groupByNode(5, avg)\");\n  });\n});\n\ndescribe('when rendering func instance', function() {\n\n  it('should handle single metric param', function() {\n    var func = dfunc.createFuncInstance('sumSeries');\n    expect(func.render('hello.metric')).to.equal(\"sumSeries(hello.metric)\");\n  });\n\n  it('should include default params if options enable it', function() {\n    var func = dfunc.createFuncInstance('scaleToSeconds', { withDefaultParams: true });\n    expect(func.render('hello')).to.equal(\"scaleToSeconds(hello, 1)\");\n  });\n\n  it('should handle int or interval params with number', function() {\n    var func = dfunc.createFuncInstance('movingMedian');\n    func.params[0] = '5';\n    expect(func.render('hello')).to.equal(\"movingMedian(hello, 5)\");\n  });\n\n  it('should handle int or interval params with interval string', function() {\n    var func = dfunc.createFuncInstance('movingMedian');\n    func.params[0] = '5min';\n    expect(func.render('hello')).to.equal(\"movingMedian(hello, '5min')\");\n  });\n\n  it('should handle metric param and int param and string param', function() {\n    var func = dfunc.createFuncInstance('groupByNode');\n    func.params[0] = 5;\n    func.params[1] = 'avg';\n    expect(func.render('hello.metric')).to.equal(\"groupByNode(hello.metric, 5, 'avg')\");\n  });\n\n  it('should handle function with no metric param', function() {\n    var func = dfunc.createFuncInstance('randomWalk');\n    func.params[0] = 'test';\n    expect(func.render(undefined)).to.equal(\"randomWalk('test')\");\n  });\n\n  it('should handle function multiple series params', function() {\n    var func = dfunc.createFuncInstance('asPercent');\n    func.params[0] = '#B';\n    expect(func.render('#A')).to.equal(\"asPercent(#A, #B)\");\n  });\n\n});\n\ndescribe('when requesting function categories', function() {\n  it('should return function categories', function() {\n    var catIndex = dfunc.getCategories();\n    expect(catIndex.Special.length).to.be.greaterThan(8);\n  });\n});\n\ndescribe('when updating func param', function() {\n  it('should update param value and update text representation', function() {\n    var func = dfunc.createFuncInstance('summarize', { withDefaultParams: true });\n    func.updateParam('1h', 0);\n    expect(func.params[0]).to.be('1h');\n    expect(func.text).to.be('summarize(1h, sum, false)');\n  });\n\n  it('should parse numbers as float', function() {\n    var func = dfunc.createFuncInstance('scale');\n    func.updateParam('0.001', 0);\n    expect(func.params[0]).to.be('0.001');\n  });\n});\n\ndescribe('when updating func param with optional second parameter', function() {\n  it('should update value and text', function() {\n    var func = dfunc.createFuncInstance('aliasByNode');\n    func.updateParam('1', 0);\n    expect(func.params[0]).to.be('1');\n  });\n\n  it('should slit text and put value in second param', function() {\n    var func = dfunc.createFuncInstance('aliasByNode');\n    func.updateParam('4,-5', 0);\n    expect(func.params[0]).to.be('4');\n    expect(func.params[1]).to.be('-5');\n    expect(func.text).to.be('aliasByNode(4, -5)');\n  });\n\n  it('should remove second param when empty string is set', function() {\n    var func = dfunc.createFuncInstance('aliasByNode');\n    func.updateParam('4,-5', 0);\n    func.updateParam('', 1);\n    expect(func.params[0]).to.be('4');\n    expect(func.params[1]).to.be(undefined);\n    expect(func.text).to.be('aliasByNode(4)');\n  });\n});\n"]}