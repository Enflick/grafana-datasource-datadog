{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","Q","backendSrv","datasourceRequest","when","status","templateSrv","replace","str","getAdhocFilters","instanceSettings","url","jsonData","api_key","app_key","ds","Datasource","targets","query","rawQuery","options","range","from","to","it","done","expected_params","method","params","application_key","sinon","spy","expect","have","been","calledWith"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClC,MAAIC,GAAG,GAAG,EAAV;AAEAC,EAAAA,UAAU,CAAC,YAAW;AACpBD,IAAAA,GAAG,CAACE,EAAJ,GAASC,aAAT;AACAH,IAAAA,GAAG,CAACI,UAAJ,GAAiB;AACfC,MAAAA,iBAAiB,EAAE,6BAAM;AACvB,eAAOL,GAAG,CAACE,EAAJ,CAAOI,IAAP,CAAY;AACjBC,UAAAA,MAAM,EAAE;AADS,SAAZ,CAAP;AAGD;AALc,KAAjB;AAOAP,IAAAA,GAAG,CAACQ,WAAJ,GAAkB;AAChBC,MAAAA,OAAO,EAAE,iBAACC,GAAD;AAAA,eAASA,GAAT;AAAA,OADO;AAEhBC,MAAAA,eAAe,EAAE;AAAA,eAAM,EAAN;AAAA;AAFD,KAAlB;AAKA,QAAIC,gBAAgB,GAAG;AACrBC,MAAAA,GAAG,EAAE,kCADgB;AAErBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE,kBADD;AAERC,QAAAA,OAAO,EAAE;AAFD;AAFW,KAAvB;AAOAhB,IAAAA,GAAG,CAACiB,EAAJ,GAAS,IAAIC,kBAAJ,CAAeN,gBAAf,EAAiCZ,GAAG,CAACI,UAArC,EAAiDJ,GAAG,CAACQ,WAArD,CAAT;AACD,GAtBS,CAAV;AAwBAT,EAAAA,QAAQ,CAAC,gCAAD,EAAmC,YAAM;AAC/CE,IAAAA,UAAU,CAAC,YAAW;AACpB,UAAIkB,OAAO,GAAG,CACZ;AAAEC,QAAAA,KAAK,EAAE,sBAAT;AAAiCC,QAAAA,QAAQ,EAAE;AAA3C,OADY,CAAd;AAIArB,MAAAA,GAAG,CAACsB,OAAJ,GAAc;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE,QADD;AAELC,UAAAA,EAAE,EAAE;AAFC,SADK;AAKZN,QAAAA,OAAO,EAAEA;AALG,OAAd;AAOD,KAZS,CAAV;AAcAO,IAAAA,EAAE,CAAC,wCAAD,EAA2C,UAACC,IAAD,EAAU;AACrD,UAAIC,eAAe,GAAG;AACpBC,QAAAA,MAAM,EAAE,KADY;AAEpBhB,QAAAA,GAAG,EAAE,wCAFe;AAGpBiB,QAAAA,MAAM,EAAE;AACNf,UAAAA,OAAO,EAAE,kBADH;AAENgB,UAAAA,eAAe,EAAE,kBAFX;AAGNP,UAAAA,IAAI,EAAE,KAHA;AAINC,UAAAA,EAAE,EAAE,KAJE;AAKNL,UAAAA,KAAK,EAAE;AALD;AAHY,OAAtB;;AAWA,UAAIf,iBAAiB,GAAG2B,kBAAMC,GAAN,CAAUjC,GAAG,CAACiB,EAAJ,CAAOb,UAAjB,EAA6B,mBAA7B,CAAxB;;AAEAJ,MAAAA,GAAG,CAACiB,EAAJ,CAAOG,KAAP,CAAapB,GAAG,CAACsB,OAAjB;AACAY,MAAAA,MAAM,CAAC7B,iBAAD,CAAN,CAA0BoB,EAA1B,CAA6BU,IAA7B,CAAkCC,IAAlC,CAAuCC,UAAvC,CAAkDT,eAAlD;AACAD,MAAAA,IAAI;AACL,KAjBC,CAAF;AAkBD,GAjCO,CAAR;AAkCD,CA7DO,CAAR","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\nimport sinon from 'sinon';\n\ndescribe('DataDogDatasource', () => {\n  let ctx = {};\n\n  beforeEach(function() {\n    ctx.$q = Q;\n    ctx.backendSrv = {\n      datasourceRequest: () => {\n        return ctx.$q.when({\n          status: 200\n        });\n      }\n    };\n    ctx.templateSrv = {\n      replace: (str) => str,\n      getAdhocFilters: () => []\n    };\n\n    let instanceSettings = {\n      url: 'https://app.datadoghq.com/api/v1',\n      jsonData: {\n        api_key: '0000deadbeaf0000',\n        app_key: '0000abcd0000abcd'\n      }\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  describe('When doing DataDog API request', () => {\n    beforeEach(function() {\n      let targets = [\n        { query: 'avg:system.load.5{*}', rawQuery: true }\n      ];\n\n      ctx.options = {\n        range: {\n          from: 12340000,\n          to: 12340000\n        },\n        targets: targets\n      };\n    });\n\n    it('should send request with proper params', (done) => {\n      let expected_params = {\n        method: 'GET',\n        url: 'https://app.datadoghq.com/api/v1/query',\n        params: {\n          api_key: '0000deadbeaf0000',\n          application_key: '0000abcd0000abcd',\n          from: 12340,\n          to: 12340,\n          query: 'avg:system.load.5{*}'\n        }\n      };\n      let datasourceRequest = sinon.spy(ctx.ds.backendSrv, 'datasourceRequest');\n\n      ctx.ds.query(ctx.options);\n      expect(datasourceRequest).to.have.been.calledWith(expected_params);\n      done();\n    });\n  });\n});\n"],"file":"datasource_spec.js"}