{"version":3,"sources":["../../src/datasource.js"],"names":["DataDogDatasource","instanceSettings","backendSrv","templateSrv","type","url","name","api_key","jsonData","application_key","app_key","supportMetrics","_cached_metrics","invokeDataDogApiRequest","then","status","title","message","catch","error","_cached_tags","length","Promise","resolve","fetching_tags","map","result","tags","hosts","tag","text","value","fetching","d","Date","setDate","getDate","from","Math","floor","getTime","params","metrics","metric","options","range","valueOf","to","targets","filter","t","hide","data","queries","val","query","queryString","join","replace","scopedVars","dataResponse","series","i","target","alias","expression","pointlist","point","timeFrom","timeTo","getEventStream","eventAnnotations","eventStreams","allEvents","eventStream","children","filteredEvents","event","alert_type","annotation","time","date_happened","flatten","start","end","events","datasourceRequest","method","response","statusText","err"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class DataDogDatasource {\n\n  constructor (instanceSettings, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.api_key = instanceSettings.jsonData.api_key;\n    this.application_key = instanceSettings.jsonData.app_key;\n    this.supportMetrics = true;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this._cached_metrics = false;\n  }\n\n  // Function to check Datasource health\n  testDatasource() {\n    return this.invokeDataDogApiRequest('/downtime')\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Data source is working\"\n      };\n    })\n    .catch(error => {\n      var message = \"Connection error\";\n      if (error && error.message) {\n        message = error.message;\n      }\n\n      return {\n        status: \"error\",\n        title: \"Error\",\n        message: message\n      };\n    });\n  }\n\n  metricFindTags() {\n    if (this._cached_tags && this._cached_tags.length) {\n      return Promise.resolve(this._cached_tags);\n    }\n\n    if (this.fetching_tags) {\n      return this.fetching_tags;\n    }\n\n    this.fetching_tags = this.invokeDataDogApiRequest('/tags/hosts')\n    .then(result => {\n      this._cached_tags = _.map(result.tags, (hosts, tag) => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n\n      return this._cached_tags;\n    });\n\n    return this.fetching_tags;\n  }\n\n  metricFindQuery() {\n    if (this._cached_metrics) {\n      return Promise.resolve(this._cached_metrics);\n    }\n\n    if (this.fetching) {\n      return this.fetching;\n    }\n\n    var d = new Date();\n    d.setDate(d.getDate() - 1);\n    var from = Math.floor(d.getTime() / 1000);\n    var params = { from: from };\n\n    this.fetching = this.invokeDataDogApiRequest('/metrics', params)\n    .then(result => {\n      this._cached_metrics = _.map(result.metrics, metric => {\n        return {\n          text: metric,\n          value: metric,\n        };\n      });\n\n      return this._cached_metrics;\n    });\n\n    return this.fetching;\n  }\n\n  query(options) {\n    var from = Math.floor(options.range.from.valueOf() / 1000);\n    var to = Math.floor(options.range.to.valueOf() / 1000);\n\n    var targets = options.targets.filter(function (t) { return !t.hide; });\n\n    if (targets.length <= 0) {\n      return Promise.resolve({data: []});\n    }\n    var queries = _.map(options.targets, function (val) {\n      return val.query;\n    });\n\n    var queryString = queries.join(',');\n    queryString = this.templateSrv.replace(queryString, options.scopedVars);\n\n    var params = {\n      from: from,\n      to: to,\n      query: queryString,\n    };\n\n    return this.invokeDataDogApiRequest('/query', params)\n    .then(result => {\n      var dataResponse = _.map(result.series, (series, i) => {\n        var target = targets[i];\n        return {\n          'target': target.alias || series.expression,\n          'datapoints': _.map(series.pointlist, point => {\n            return [point[1], point[0]];\n          })\n        };\n      });\n\n      return {data: dataResponse};\n    });\n  }\n\n  annotationQuery(options) {\n    let timeFrom = Math.floor(options.range.from.valueOf() / 1000);\n    let timeTo = Math.floor(options.range.to.valueOf() / 1000);\n    return this.getEventStream(timeFrom, timeTo)\n    .then(eventStreams => {\n      let eventAnnotations = eventStreams.map(eventStream => {\n        let allEvents = eventStream.children;\n        let filteredEvents = _.filter(allEvents, event => {\n          return event.alert_type !== 'success';\n        });\n\n        return _.map(filteredEvents, event => {\n          return {\n            annotation: options.annotation,\n            time: event.date_happened * 1000,\n            title: eventStream.title,\n            text: eventStream.text,\n            tags: eventStream.tags\n          };\n        });\n      });\n\n      return _.flatten(eventAnnotations);\n    });\n  }\n\n  getEventStream(timeFrom, timeTo) {\n    let params = {\n      start: timeFrom,\n      end: timeTo\n    };\n\n    return this.invokeDataDogApiRequest('/events', params)\n    .then(result => {\n      if (result.events) {\n        return result.events;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  invokeDataDogApiRequest(url, params = {}) {\n    // Set auth params\n    params.api_key = this.api_key;\n    params.application_key = this.application_key;\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.url + url,\n      params: params\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    })\n    .catch(error => {\n      var message = 'DataDog API request error';\n      if (error.statusText) {\n        message = error.status + ' ' + error.statusText;\n        throw {message: message};\n      } else if (error.err.statusText) {\n        throw {message: error.err.statusText};\n      } else {\n        throw {message: message};\n      }\n    });\n  }\n}\n"]}