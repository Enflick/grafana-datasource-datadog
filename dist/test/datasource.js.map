{"version":3,"sources":["../../src/datasource.js"],"names":["DataDogDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","api_key","jsonData","application_key","app_key","supportMetrics","q","_cached_metrics","invokeDataDogApiRequest","then","response","status","message","title","_cached_tags","length","Promise","resolve","fetching_tags","map","result","tags","hosts","tag","text","value","fetching","d","Date","setDate","getDate","from","Math","floor","getTime","params","metrics","metric","options","range","valueOf","to","targets","filter","t","hide","when","data","queries","val","query","queryString","join","dataResponse","series","i","target","alias","expression","pointlist","point","datasourceRequest","method","console","log","catch","error","err","statusText"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class DataDogDatasource {\n\n  constructor (instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.api_key = instanceSettings.jsonData.api_key;\n    this.application_key = instanceSettings.jsonData.app_key;\n    this.supportMetrics = true;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this._cached_metrics = false;\n  }\n\n  // Function to check Datasource health\n  testDatasource() {\n    return this.invokeDataDogApiRequest('/downtime')\n    .then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\",\n        };\n      }\n    });\n  }\n\n  metricFindTags() {\n    if (this._cached_tags && this._cached_tags.length) {\n      return Promise.resolve(this._cached_tags);\n    }\n\n    if (this.fetching_tags) {\n      return this.fetching_tags;\n    }\n\n    this.fetching_tags = this.invokeDataDogApiRequest('/tags/hosts')\n    .then(result => {\n      this._cached_tags = _.map(result.tags, (hosts, tag) => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n\n      return this._cached_tags;\n    });\n\n    return this.fetching_tags;\n  }\n\n  metricFindQuery() {\n    if (this._cached_metrics) {\n      return Promise.resolve(this._cached_metrics);\n    }\n\n    if (this.fetching) {\n      return this.fetching;\n    }\n\n    var d = new Date();\n    d.setDate(d.getDate() - 1);\n    var from = Math.floor(d.getTime() / 1000);\n    var params = { from: from };\n\n    this.fetching = this.invokeDataDogApiRequest('/metrics', params)\n    .then(result => {\n      this._cached_metrics = _.map(result.metrics, metric => {\n        return {\n          text: metric,\n          value: metric,\n        };\n      });\n\n      return this._cached_metrics;\n    });\n\n    return this.fetching;\n  }\n\n  query(options) {\n    var from = Math.floor(options.range.from.valueOf() / 1000);\n    var to = Math.floor(options.range.to.valueOf() / 1000);\n\n    var targets = options.targets.filter(function (t) { return !t.hide; });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    var queries = _.map(options.targets, function (val) {\n      return val.query;\n    });\n    var queryString = queries.join(',');\n    var params = {\n      from: from,\n      to: to,\n      query: queryString,\n    };\n\n    return this.invokeDataDogApiRequest('/query', params)\n    .then(result => {\n      var dataResponse = _.map(result.series, (series, i) => {\n        var target = targets[i];\n        return {\n          'target': target.alias || series.expression,\n          'datapoints': _.map(series.pointlist, point => {\n            return [point[1], point[0]];\n          })\n        };\n      });\n\n      return {data: dataResponse};\n    });\n  }\n\n  invokeDataDogApiRequest(url, params = {}) {\n    // Set auth params\n    params.api_key = this.api_key;\n    params.application_key = this.application_key;\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.url + url,\n      params: params\n    })\n    .then(response => {\n      if (response.data) {\n        console.log(response.data);\n        return response.data;\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    })\n    .catch(error => {\n      if (error.err.statusText) {\n        throw {message: error.err.statusText};\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    });\n  }\n}\n"]}