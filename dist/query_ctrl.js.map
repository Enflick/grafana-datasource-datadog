{"version":3,"sources":["../src/query_ctrl.js"],"names":["_","dfunc","QueryCtrl","queryBuilder","globSet","DataDogQueryCtrl","$scope","$injector","uiSegmentSrv","templateSrv","removeText","target","aggregation","aggregationSegment","newSegment","value","fake","custom","metric","metricSegment","groupBy","groupBySegment","SegmentSrv","tags","tagSegments","map","fixTagSegments","functions","f","createFuncInstance","func","funcDef","withDefaultParams","params","slice","as","asSegment","rawQuery","console","log","JSON","stringify","datasource","metricFindQuery","then","transformToSegments","Promise","resolve","text","segment","tagFindQuery","type","removeSegment","newFake","results","unshift","i","length","push","split","replace","trim","panelCtrl","refresh","paramSegment","paramSegmentNew","indexNew","tagSegmentUpdated","count","lastSegment","Math","max","newPlusButton","error","def","name","without","persistFunctions","targetChanged","added","index","splice","realSegments","filter","query","buildQuery","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport dfunc from './dfunc';\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './func_editor';\nimport './add_datadog_func';\nimport * as queryBuilder from './query_builder';\n\n\nexport var globSet = [];\n\n\nexport class DataDogQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv, templateSrv)  {\n    super($scope, $injector);\n    this.removeText = '-- remove tag --';\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n\n    if (this.target.aggregation) {\n      this.aggregationSegment = new uiSegmentSrv.newSegment(\n        this.target.aggregation\n      );\n    } else {\n      this.aggregationSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Aggregation',\n        fake: true,\n        custom: false,\n      });\n    }\n    if (this.target.metric) {\n      this.metricSegment = new uiSegmentSrv.newSegment(\n        this.target.metric\n      );\n\n    }\n    else {\n      this.metricSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n        custom: false,\n      });\n    }\n    if(this.target.groupBy) {\n      this.groupBySegment = new uiSegmentSrv.SegmentSrv.newSegment(\n        this.target.groupBySegment\n      );\n    } else {\n      this.groupBySegment = new uiSegmentSrv.newSegment({\n        value: 'Group By',\n        fake: true,\n        custom: false,\n      });\n    }\n\n    this.target.tags = this.target.tags || [];\n    this.tagSegments = this.target.tags.map(uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.functions = [];\n    this.target.functions = this.target.functions || [];\n    this.functions = _.map(this.target.functions, func => {\n      var f = dfunc.createFuncInstance(func.funcDef, {withDefaultParams: false});\n      f.params = func.params.slice();\n      return f;\n    });\n\n    if (this.target.as) {\n      this.asSegment = uiSegmentSrv.newSegment(this.target.as);\n    } else {\n      this.asSegment = uiSegmentSrv.newSegment({\n        value: 'Select As',\n        fake: true,\n        custom: false,\n      });\n    }\n\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMetrics() {\n    console.log(\"CONSTRUCTOR VALUE::::: \" + JSON.stringify(this.metricSegment));\n    return this.datasource.metricFindQuery()\n    .then(this.uiSegmentSrv.transformToSegments(true));\n  }\n\n  getAggregations() {\n    return Promise.resolve([\n      {text: 'avg by', value: 'avg'},\n      {text: 'max by', value: 'max'},\n      {text: 'min by', value: 'min'},\n      {text: 'sub by', value: 'sum'},\n    ]);\n  }\n\n  getAs() {\n    return Promise.resolve([\n      {text: 'None', value: 'None'},\n      {text: 'as_count', value: 'as_count'},\n      {text: 'as_rate', value: 'as_rate'},\n    ]);\n  }\n\n\n\n  getTags(segment) {\n    console.log(\"INSIDE GET TAGS\");\n    return this.datasource.tagFindQuery()\n    .then(this.uiSegmentSrv.transformToSegments(true))\n    .then(results => {\n      if (segment.type !== 'plus-button') {\n        let removeSegment = this.uiSegmentSrv.newFake(this.removeText);\n        results.unshift(removeSegment);\n      }\n        for (var i = 0; i < results.length; i++) {\n          globSet.push(JSON.stringify(results[i].text).split(\":\")[0].replace('\"','').trim());\n        }\n\n      console.log(globSet);\n      return results;\n    });\n  }\n\n  aggregationChanged() {\n    this.target.aggregation = this.aggregationSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  metricChanged() {\n    console.log(\"inside metricChanged()\");\n    this.target.metric = this.metricSegment.value;\n    //console.log(\"this.metric.value.length: \" + this.metricSegment.value.length);\n    this.panelCtrl.refresh();\n\n  }\n\n  asChanged() {\n\n    if (this.asSegment.value === 'None') {\n      this.target.as = null;\n    } else {\n      this.target.as = this.asSegment.value;\n    }\n    this.panelCtrl.refresh();\n  }\n\n  groupByChanged(paramSegment) {\n    //console.log(\"this.getTags:::::\" + JSON.stringify(this.datasource.tagFindQuery().then(this.uiSegmentSrv.transformToSegments(true))));\n\n    console.log(this.datasource);\n    //return this.datasource.groupByDatasource();\n\n    //return this.getTags(paramSegment);\n  }\n\n\n  groupByUpdated(paramSegmentNew,indexNew) {\n    console.log (\"THIS IS THE TYPE OF GROUPBYUPDATED::::::::::::::::::\" + typeof this.tagSegmentUpdated(paramSegmentNew,indexNew));\n\n    return this.tagSegmentUpdated(paramSegmentNew,indexNew);\n  }\n\n  fixTagSegments() {\n    var count = this.tagSegments.length;\n    var lastSegment = this.tagSegments[Math.max(count-1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  targetChanged() {\n    if (this.error) {\n      return;\n    }\n    this.panelCtrl.refresh();\n  }\n\n  persistFunctions () {\n    this.target.functions = _.map(this.functions, func => {\n      return {\n        funcDef: func.def.name,\n        params: func.params.slice(),\n      };\n    });\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  addFunction(funcDef) {\n    var func = dfunc.createFuncInstance(funcDef, {withDefaultParams: true});\n    func.added = true;\n    this.functions.push(func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  tagSegmentUpdated(segment, index) {\n\n    if (segment.value === this.removeText) {\n      this.tagSegments.splice(index, 1);\n\n    }\n\n    let realSegments = _.filter(this.tagSegments, segment => segment.value);\n    this.target.tags = realSegments.map(segment => segment.value);\n\n    this.tagSegments = _.map(this.target.tags, this.uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.panelCtrl.refresh();\n  }\n\n  getCollapsedText() {\n    if (this.target.rawQuery) {\n      return this.target.query;\n    } else {\n      return queryBuilder.buildQuery(this.target);\n    }\n  }\n}\n\nDataDogQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}