{"version":3,"sources":["../src/datasource.js"],"names":["_","DataDogDatasource","instanceSettings","backendSrv","templateSrv","type","url","name","api_key","jsonData","application_key","app_key","supportMetrics","_cached_metrics","invokeDataDogApiRequest","then","status","title","message","catch","error","_cached_tags","length","Promise","resolve","fetching_tags","map","result","tags","hosts","tag","text","value","fetching","d","Date","setDate","getDate","from","Math","floor","getTime","params","metrics","metric","options","range","valueOf","to","targets","filter","t","hide","data","queries","val","query","queryString","join","replace","scopedVars","dataResponse","series","i","target","alias","expression","pointlist","point","timeFrom","timeTo","annotation","priority","sources","getEventStream","eventAnnotations","eventStreams","allEvents","eventStream","children","filteredEvents","event","alert_type","time","date_happened","flatten","start","end","events","datasourceRequest","method","response","statusText","err"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class DataDogDatasource {\n\n  constructor (instanceSettings, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.api_key = instanceSettings.jsonData.api_key;\n    this.application_key = instanceSettings.jsonData.app_key;\n    this.supportMetrics = true;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this._cached_metrics = false;\n  }\n\n  // Function to check Datasource health\n  testDatasource() {\n    return this.invokeDataDogApiRequest('/downtime')\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Data source is working\"\n      };\n    })\n    .catch(error => {\n      var message = \"Connection error\";\n      if (error && error.message) {\n        message = error.message;\n      }\n\n      return {\n        status: \"error\",\n        title: \"Error\",\n        message: message\n      };\n    });\n  }\n\n  metricFindTags() {\n    if (this._cached_tags && this._cached_tags.length) {\n      return Promise.resolve(this._cached_tags);\n    }\n\n    if (this.fetching_tags) {\n      return this.fetching_tags;\n    }\n\n    this.fetching_tags = this.invokeDataDogApiRequest('/tags/hosts')\n    .then(result => {\n      this._cached_tags = _.map(result.tags, (hosts, tag) => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n\n      return this._cached_tags;\n    });\n\n    return this.fetching_tags;\n  }\n\n  metricFindQuery() {\n    if (this._cached_metrics) {\n      return Promise.resolve(this._cached_metrics);\n    }\n\n    if (this.fetching) {\n      return this.fetching;\n    }\n\n    var d = new Date();\n    d.setDate(d.getDate() - 1);\n    var from = Math.floor(d.getTime() / 1000);\n    var params = { from: from };\n\n    this.fetching = this.invokeDataDogApiRequest('/metrics', params)\n    .then(result => {\n      this._cached_metrics = _.map(result.metrics, metric => {\n        return {\n          text: metric,\n          value: metric,\n        };\n      });\n\n      return this._cached_metrics;\n    });\n\n    return this.fetching;\n  }\n\n  query(options) {\n    var from = Math.floor(options.range.from.valueOf() / 1000);\n    var to = Math.floor(options.range.to.valueOf() / 1000);\n\n    var targets = options.targets.filter(function (t) { return !t.hide; });\n\n    if (targets.length <= 0) {\n      return Promise.resolve({data: []});\n    }\n    var queries = _.map(options.targets, function (val) {\n      return val.query;\n    });\n\n    var queryString = queries.join(',');\n    queryString = this.templateSrv.replace(queryString, options.scopedVars);\n\n    var params = {\n      from: from,\n      to: to,\n      query: queryString,\n    };\n\n    return this.invokeDataDogApiRequest('/query', params)\n    .then(result => {\n      var dataResponse = _.map(result.series, (series, i) => {\n        var target = targets[i];\n        return {\n          'target': target.alias || series.expression,\n          'datapoints': _.map(series.pointlist, point => {\n            return [point[1], point[0]];\n          })\n        };\n      });\n\n      return {data: dataResponse};\n    });\n  }\n\n  annotationQuery(options) {\n    let timeFrom = Math.floor(options.range.from.valueOf() / 1000);\n    let timeTo = Math.floor(options.range.to.valueOf() / 1000);\n    let {priority, sources, tags} = options.annotation;\n\n    return this.getEventStream(timeFrom, timeTo, priority, sources, tags)\n    .then(eventStreams => {\n      let eventAnnotations = eventStreams.map(eventStream => {\n        let allEvents = eventStream.children;\n        let filteredEvents = _.filter(allEvents, event => {\n          return event.alert_type !== 'success';\n        });\n\n        return _.map(filteredEvents, event => {\n          return {\n            annotation: options.annotation,\n            time: event.date_happened * 1000,\n            title: eventStream.title,\n            text: eventStream.text,\n            tags: eventStream.tags\n          };\n        });\n      });\n\n      return _.flatten(eventAnnotations);\n    });\n  }\n\n  getEventStream(timeFrom, timeTo, priority, sources, tags) {\n    let params = {\n      start: timeFrom,\n      end: timeTo\n    };\n    if (priority) {\n      params.priority = priority;\n    }\n    if (sources) {\n      params.sources = sources;\n    }\n    if (tags) {\n      params.tags = tags;\n    }\n\n    return this.invokeDataDogApiRequest('/events', params)\n    .then(result => {\n      if (result.events) {\n        return result.events;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  invokeDataDogApiRequest(url, params = {}) {\n    // Set auth params\n    params.api_key = this.api_key;\n    params.application_key = this.application_key;\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.url + url,\n      params: params\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    })\n    .catch(error => {\n      var message = 'DataDog API request error';\n      if (error.statusText) {\n        message = error.status + ' ' + error.statusText;\n        throw {message: message};\n      } else if (error.err.statusText) {\n        throw {message: error.err.statusText};\n      } else {\n        throw {message: message};\n      }\n    });\n  }\n}\n"]}