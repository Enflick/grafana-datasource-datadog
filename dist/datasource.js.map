{"version":3,"sources":["../src/datasource.js"],"names":["_","DataDogDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","api_key","jsonData","application_key","app_key","supportMetrics","q","_cached_metrics","invokeDataDogApiRequest","then","response","status","message","title","_cached_tags","length","Promise","resolve","fetching_tags","map","result","tags","hosts","tag","text","value","fetching","d","Date","setDate","getDate","from","Math","floor","getTime","params","metrics","metric","options","range","valueOf","to","targets","filter","t","hide","when","data","queries","val","query","queryString","join","dataResponse","series","i","target","alias","expression","pointlist","point","datasourceRequest","method","console","log","catch","error","err","statusText"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class DataDogDatasource {\n\n  constructor (instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.api_key = instanceSettings.jsonData.api_key;\n    this.application_key = instanceSettings.jsonData.app_key;\n    this.supportMetrics = true;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this._cached_metrics = false;\n  }\n\n  // Function to check Datasource health\n  testDatasource() {\n    return this.invokeDataDogApiRequest('/downtime')\n    .then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\",\n        };\n      }\n    });\n  }\n\n  metricFindTags() {\n    if (this._cached_tags && this._cached_tags.length) {\n      return Promise.resolve(this._cached_tags);\n    }\n\n    if (this.fetching_tags) {\n      return this.fetching_tags;\n    }\n\n    this.fetching_tags = this.invokeDataDogApiRequest('/tags/hosts')\n    .then(result => {\n      this._cached_tags = _.map(result.tags, (hosts, tag) => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n\n      return this._cached_tags;\n    });\n\n    return this.fetching_tags;\n  }\n\n  metricFindQuery() {\n    if (this._cached_metrics) {\n      return Promise.resolve(this._cached_metrics);\n    }\n\n    if (this.fetching) {\n      return this.fetching;\n    }\n\n    var d = new Date();\n    d.setDate(d.getDate() - 1);\n    var from = Math.floor(d.getTime() / 1000);\n    var params = { from: from };\n\n    this.fetching = this.invokeDataDogApiRequest('/metrics', params)\n    .then(result => {\n      this._cached_metrics = _.map(result.metrics, metric => {\n        return {\n          text: metric,\n          value: metric,\n        };\n      });\n\n      return this._cached_metrics;\n    });\n\n    return this.fetching;\n  }\n\n  query(options) {\n    var from = Math.floor(options.range.from.valueOf() / 1000);\n    var to = Math.floor(options.range.to.valueOf() / 1000);\n\n    var targets = options.targets.filter(function (t) { return !t.hide; });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    var queries = _.map(options.targets, function (val) {\n      return val.query;\n    });\n    var queryString = queries.join(',');\n    var params = {\n      from: from,\n      to: to,\n      query: queryString,\n    };\n\n    return this.invokeDataDogApiRequest('/query', params)\n    .then(result => {\n      var dataResponse = _.map(result.series, (series, i) => {\n        var target = targets[i];\n        return {\n          'target': target.alias || series.expression,\n          'datapoints': _.map(series.pointlist, point => {\n            return [point[1], point[0]];\n          })\n        };\n      });\n\n      return {data: dataResponse};\n    });\n  }\n\n  invokeDataDogApiRequest(url, params = {}) {\n    // Set auth params\n    params.api_key = this.api_key;\n    params.application_key = this.application_key;\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.url + url,\n      params: params\n    })\n    .then(response => {\n      if (response.data) {\n        console.log(response.data);\n        return response.data;\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    })\n    .catch(error => {\n      if (error.err.statusText) {\n        throw {message: error.err.statusText};\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    });\n  }\n}\n"]}